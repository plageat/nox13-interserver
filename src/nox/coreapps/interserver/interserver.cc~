/* Copyright 2008 (C) Nicira, Inc.
 *
 * This file is part of NOX.
 *
 * NOX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NOX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NOX.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <boost/bind.hpp>
#include <boost/foreach.hpp>
#include <boost/shared_array.hpp>
#include <cstring>
#include <netinet/in.h>
#include <stdexcept>
#include <stdint.h>

#include "openflow-default.hh"
#include "assert.hh"
#include "component.hh"
#include "flow.hh"
#include "fnv_hash.hh"
#include "hash_set.hh"
#include "ofp-msg-event.hh"
#include "vlog.hh"
#include "flowmod.hh"
#include "datapath-join.hh"
#include <stdio.h>

#include "netinet++/ethernetaddr.hh"
#include "netinet++/ethernet.hh"

#include "../../../oflib/ofl-actions.h"
#include "../../../oflib/ofl-messages.h"

#include "../messenger/messenger.hh"

using namespace vigil;
using namespace vigil::container;
using namespace std;

namespace {


Vlog_module lg("interserver");

class Interserver : public Component 
{
public:
     Interserver(const Context* c,
         const json_object*) 
         : Component(c) { }
    
    void configure(const Configuration*) {
    }
	
	Disposition handler_msg_event(const Event& e)
	{
		Msg_event& msg_event = dynamic_cast<Msg_event&>( const_cast<Event&>(e) );
		
		const char *m_log = msg_event.len == 0 ? "Message received with size 0" : "Message received, dump is:";
		lg.dbg(m_log);
		if(msg_event.len) 
			msg_event.dumpBytes();
	}
	
    Disposition handler_join(const Event& e)
{
  const Datapath_join_event& dpj = assert_cast<const Datapath_join_event&>(e);

    /* The behavior on a flow miss is to drop packets
       so we need to install a default flow */
    VLOG_DBG(lg,"Installing default flow with priority 0 to send packets to the controller on dpid= 0x%"PRIx64"\n", dpj.dpid.as_host());
    Flow  *f = new Flow();

    Actions *acts = new Actions();
    acts->CreateOutput(OFPP_CONTROLLER);
    Instruction *inst =  new Instruction();
    inst->CreateApply(acts);
    FlowMod *mod = new FlowMod(0x00ULL,0x00ULL, 0,OFPFC_ADD, OFP_FLOW_PERMANENT, OFP_FLOW_PERMANENT, 0, 0, 
                                OFPP_ANY, OFPG_ANY, ofd_flow_mod_flags());
    mod->AddMatch(&f->match);
    mod->AddInstructions(inst);
    send_openflow_msg(dpj.dpid, (struct ofl_msg_header *)&mod->fm_msg, 0/*xid*/, true/*block*/);
    
    return CONTINUE;

    }

    Disposition handler(const Event& e)
    {

        lg.dbg("Hello world");
	
        return CONTINUE;
    }

    void install()
    {
		register_handler(Datapath_join_event::static_get_name(), boost::bind(&Interserver::handler_join, this, _1));
        register_handler(Ofp_msg_event::get_name(OFPT_PACKET_IN), boost::bind(&Interserver::handler, this, _1));
		register_handler(Msg_event::static_get_name(), boost::bind(&Interserver::handler_msg_event, this, _1));
    }
};

REGISTER_COMPONENT(container::Simple_component_factory<Interserver>, Interserver);

} // unnamed namespace

